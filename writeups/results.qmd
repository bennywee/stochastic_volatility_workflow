---
title: "Results"
format:
  html:
    theme: flatly
    toc: true
---

```{r}
#| echo: false
############################ Parameters to set ############################
model_name <- "sv_user_guide_reparameterised_ksc_priors_ksc_phi_0.97779_sig_0.1585_beta_0.64733_"
pp_flag <- "posterior" # prior = no likelihood estimation, posterior = likelihood estimation


# Data location
data_loc <- "simulated"
data_type <- "ksc"
file_name <- "phi_0.97779_sig_0.1585_beta_0.64733"
############################ Parameters to set ############################
```

```{r}
#| echo: false
#| warnings: false
#| messages: false
#| output: false
library(tidyverse)
library(shinystan)
library(posterior)

source(here::here("R", "plots.R"))
source(here::here("R", "model_eval.R"))

path <- here::here("output", model_name)
rds_path <- list.files(path = here::here("output", model_name), full.names = TRUE, pattern = "*.RDS")
csv_path <- list.files(path = here::here("output", model_name), full.names = TRUE, pattern = "*.csv")

# Load model results
model_fit <- readRDS(rds_path[grep(paste(pp_flag, "fit", sep = ""), rds_path)])

# Load training data
data <- read.csv(here::here("data", data_loc, data_type, paste(file_name, ".csv", sep = "")))
dependent_variable <- "yobs" # log squared returns
returns <- data[complete.cases(data[dependent_variable]), dependent_variable]

# Data for predictive checks
y_rep_df_sample <- mcmc_output_df(model_obj = model_fit, variable = "y_rep", sample_n = 10)
log_y_squared_avg <- average_over_draws(model_obj = model_fit, variable = "log_y_squared")
auto_corr <- mcmc_output_df(model_obj = model_fit, variable = "log_y_squared_autocorr", sample_n = NULL)
kurtosis <- mcmc_output_df(model_obj = model_fit, variable = "y_rep_kurtosis", sample_n = NULL)
skewness <- mcmc_output_df(model_obj = model_fit, variable = "y_rep_skewness", sample_n = NULL)
true_returns_df <- returns_df(returns)
true_log_sq_returns <- log_squared_returns(returns)
```

# Model summary

## Predictive checks

### y_t
```{r}
#| echo: false
plot_predictive_check(
  dataframe = y_rep_df_sample,
  x_axis = time,
  y_axis = y_rep,
  groups = mcmc_draw,
  prior_post = pp_flag,
  save = FALSE,
  path = NULL,
  true_data = true_returns_df
)
```

### Distribution of log(y*^2)
```{r}
#| echo: false
plot_log_y_sqd_hist(
  mcmc_data = log_y_squared_avg,
  true_data = true_log_sq_returns,
  mcmc_x_axis = average,
  true_x_axis = log_y_squared,
  prior_post = pp_flag,
  save = FALSE,
  path = fit_location
)
```

```{r}
#| echo: false
plot_log_y_sqd_kde(
  mcmc_data = log_y_squared_avg,
  true_data = true_log_sq_returns,
  mcmc_x_axis = average,
  true_x_axis = log_y_squared,
  prior_post = pp_flag,
  save = FALSE,
  path = fit_location
)
```

### Autocorrelation log(Y^2)

```{r}
#| echo: false
plot_hist(
  data = auto_corr,
  x_axis = log_y_squared_autocorr,
  variable_name = "log(Y^2) autocorrelation",
  prior_post = pp_flag,
  save = FALSE,
  path = fit_location
)
```

### Kurtosis y_t

```{r}
#| echo: false
plot_hist(
  data = kurtosis,
  x_axis = y_rep_kurtosis,
  variable_name = "y_t kurtosis",
  prior_post = pp_flag,
  save = FALSE,
  path = fit_location
)
```

### Skewness y_t
```{r}
#| echo: false
plot_hist(
  data = skewness,
  x_axis = y_rep_skewness,
  variable_name = "y_t skewness",
  prior_post = pp_flag,
  save = FALSE,
  path = fit_location
)
```

### Checking phi and p (beta prior)

```{r}
#| echo: false
plot_hist(
  data = mcmc_output_df(model_obj = model_fit, variable = "phi"),
  x_axis = phi,
  variable_name = "phi",
  prior_post = pp_flag,
  save = FALSE,
  path = fit_location
)
```


```{r}
#| echo: false
plot_hist(
  data = mcmc_output_df(model_obj = model_fit, variable = "p"),
  x_axis = p,
  variable_name = "p",
  prior_post = pp_flag,
  save = FALSE,
  path = fit_location
)

```

# Model code

```{r}
#| echo: false
cat(model_fit$code(), sep = "\n")
```